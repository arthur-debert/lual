Logger Trees and Hierarchy
(Updated to reflect new-design.txt)

This document provides a brief overview of logger naming and hierarchy.
For the detailed logging system design, including configuration, event flow,
and examples, please refer to: docs/pre-release/new-design.txt


1. NAMES AND HIERARCHY

    Loggers are identified by dot-separated names, forming a hierarchy.
    For example, a logger named "my.app.db" is a child of "my.app", which
    in turn is a child of a logger named "my".

    All user-created loggers are ultimately descendants of a special internal
    root logger named `_root`.

    - `lual.logger("app")` creates/retrieves a logger named "app", child of `_root`.
    - `lual.logger("app.db")` creates/retrieves "app.db", child of "app".

    Log events, by default, propagate upwards through this hierarchy. For instance,
    an event from "app.db" would propagate to "app", and then to `_root`,
    unless propagation is explicitly disabled on one of the loggers in the chain.


2. SCENARIOS (Illustrative - see new-design.txt for canonical examples)

    The behavior of these scenarios is governed by the principles in
    `new-design.txt`.

    2.1. Simplest Case (Out-of-the-box):

        ```lua
        -- in main.lua
        local lual = require("lual")
        local logger = lual.logger("myApp")

        logger.debug("Debug msg.") -- Not logged (default _root level is WARN)
        logger.warn("Warning msg.") -- Logged to console (by _root)
        ```

        Explanation:
        - `_root` has level `lual.WARN` and a console output.
        - `logger` ("myApp") inherits effective level `WARN` from `_root` and has no
          outputs of its own.
        - The `warn` message is processed by `_root`.

    2.2. User Configures Root Logger:

        ```lua
        -- in init.lua
        local lual = require("lual")
        lual.config({ level = lual.DEBUG })

        -- in some_module.lua
        local mod_logger = lual.logger("myApp.moduleA")
        mod_logger.debug("Module A debug.") -- Logged to console (by _root)
        ```

        Explanation:
        - `_root` level is now `lual.DEBUG`.
        - `mod_logger` inherits effective level `DEBUG`.
        - The `debug` message from `mod_logger` propagates to `_root` and is logged.

    2.3. Logger-Specific Configuration:

        ```lua
        -- in init.lua
        local lual = require("lual")
        -- _root uses default WARN level and console output

        -- in feature_x.lua
        local feature_logger = lual.logger("app.featureX", {
            level = lual.DEBUG,
            outputs = { {type = lual.console} } -- Own console output
        })

        feature_logger.debug("Feature X debug.") -- Logged to console (by feature_logger)
        feature_logger.warn("Feature X warning.") -- Logged by feature_logger (to console)
                                            -- AND by _root (to console)
        ```

        Explanation:
        - `feature_logger` has its own `DEBUG` level and console output.
        - `feature_logger.debug`: Logged by `feature_logger`. Does not propagate to `_root` to be logged again because `_root` level is `WARN` (`DEBUG < WARN`).
        - `feature_logger.warn`: Logged by `feature_logger`. Propagates to `_root` which also logs it.


