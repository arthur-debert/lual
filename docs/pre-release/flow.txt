                                                            The Log Even Flow



The Dispatch Loop: 
        We are ready to iterate through the logger chain actual. For each logger (again, bottom up the chain). 
        - Does it level match? If no, next item.
        - If yes, here's what needs to be done: 
            - This logger's config must be built.
            - The config is the merged table resulting from merging all logger chain candidates up to there.
            This has a subtle point: loggers up the chain from a propagate termination will not log events, but their configs will base the loggers down.
            In the example above: 
                - App logger: config merges the root config and the app config
                - Connection logger: config merges the root config, the app config and the app.db.connection config.

            The merging rule is deeper loggers config will overwrite keys existent in the previous table. 

            Say you have a chain of root, root.a, root.a.b, root.a.b.c, root.a.b.c.d. If an event is logged in root.a.b.c.d this logger's config is the merge of root, root.a, root.a.b, root.a.b.c where the latter items overwrite the formers. Even if root.a.b has propagate = false, its parents (root and root.a) configs will create the baseline for this. 

    6.3. Dispatch at Logger X:
        Now, we've built the candidate chain, pruned items before propagate = false and know that this logger X level matches the event.
        1. Build the config for logger X (as explained above), this is logger_x config
        2. Runs the transformers in that config, from there we have the final lua table for the log record.
        3. Loops through all dispatchers in logger_x config.
            1. For each dispatcher, pass the log record 
                - The dispatcher will run the presenter
                - Then it will dispatch the received log record table, then alter by the presenter. 

7. Output:

    7.1. Dispatch Event:
        A log event is dispatched by a dispatcher (that is, in common parlance: logged), written to disk, 
        streamed to stdout, posted as a UDP socket etc