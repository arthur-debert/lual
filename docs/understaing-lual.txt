Understanding lual


If you're familiar with logging libs, nothing here should be a surprise, in
which case just read the renaming footnotes at the end of this file.

Lual strives to find a good balance between simplicity and flexibility, between
pre established expectations and coherence. As such it probably nags your
senses at places.


The Logging Pipeline

When you code runs: 

    logger.debug("Hey guys, I'm debugging")

This is what happens: 

    1. The main logger is called. 
    2. It replaces the debug call with a log call and appends the level
       and message to the log queue. (those are just shortcuts to log)
    3. This triggers the ingest pipeline.
        a. The first question is: which (if any) of your loggers should see the
        message? 
        b. It goes through loggers, finds the one you that cares about this level
        and that shares a name (if you haven't changed much it will hit your
        root logger).
        Once it finds a logger, it makes sense to work on this (else just drop
        the message)
    4. Now your log record will go through the logging pipeline: 
        a. It will be passed to any(s) of the transformers you have set. These
        are factions that receive a log record and return one. They usually do
        thing on the data side of it, like changing the timezone, adding or
        computing more information (like the which server or process generated
        this) and others.
        b. It will be sent to the dispatcher (if any)
        c. The dispatcher will write it to the output (file, console, etc.)
        d. After all transformations are done, it's time to make your message
        look good! This will run the presenter(s) which will change things like
        adding colors, emoji, etc.
        e. Once it looks amazing, it's time for the world to see it! We'll go
        through all of your dispatchers and dispatch that message: to stdout, a
        file, syslog or anywhere.


    In a few words: 

    seraching which loggers should see this
