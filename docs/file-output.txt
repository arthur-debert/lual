FILE dispatcher: ROTATING LOG FILES

The file dispatcher handler writes log messages to files with automatic rotation
on startup. This prevents log files from growing indefinitely. This is not a 
robust rotation solution, though. 

    -- Note: 
        For production systems, you should use a proper log rotation tool like 
        logrotate.
    --

When initialized, the file dispatcher:
1. Rotates existing log files, keeping up to 5 backups
   - app.log → app.log.1, app.log.1 → app.log.2, ..., app.log.4 → app.log.5
   - app.log.5 is deleted if it exists
2. Opens a fresh main log file for new entries

This rotation happens once per application startup, making it ideal for
single-threaded Lua applications and providing session-specific logs.


BASIC USAGE

    local lual = require("lual")
    local file_dispatcher = require("lual.dispatchers.file_dispatcher")

    local logger = lual.logger("app")
    logger:add_dispatcher(file_dispatcher({ path = "app.log" }))
    
    logger:info("Application started")  -- Written to fresh app.log
    -- lua


CONFIGURATION

The file dispatcher factory accepts a single configuration parameter:

    file_dispatcher({ path = "path/to/logfile.log" })

- `path` (string, required): Path to the main log file


EXAMPLE: APPLICATION LOGGING WITH ROTATION

    local lual = require("lual")
    local file_dispatcher = require("lual.dispatchers.file_dispatcher")

    -- Set up logger with file dispatcher
    local app_logger = lual.logger("myapp")
    app_logger:set_level(lual.levels.INFO)
    app_logger:add_dispatcher(
        file_dispatcher({ path = "/var/log/myapp.log" }),
        lual.formatters.text
    )

    -- Each application restart will rotate logs automatically
    app_logger:info("Application started - version 1.2.3")
    app_logger:error("Database connection failed")
    -- lua

After several application restarts, you'll have:
- `/var/log/myapp.log` (current session)
- `/var/log/myapp.log.1` (previous session)
- `/var/log/myapp.log.2` (2 sessions ago)
- ... up to `/var/log/myapp.log.5`


INTERNALS

The file dispatcher implementation uses a three-phase approach for safe rotation:

1. **Command Generation**: Creates a list of file operations (remove/rename)
   without executing them, allowing validation and testing

2. **Validation**: Ensures the command list is correct and won't cause
   data loss (no duplicate targets, proper backup file patterns)

3. **Execution**: Performs the actual file operations in the correct order

File existence is checked using `io.open(path, "r")` rather than filesystem
APIs for maximum compatibility across Lua implementations and platforms.

The rotation logic processes files in reverse order (.5 → .4 → .3 → .2 → .1)
to avoid overwriting files that haven't been moved yet. Error handling is
robust - individual operation failures are logged to stderr but don't prevent
the application from continuing.

Each log write opens the file in append mode, writes the message with a
newline, flushes the buffer, and closes the file. This ensures data is
written immediately and the file handle doesn't remain open.
