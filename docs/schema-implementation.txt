Schema-based Validation for Outputs and Formatters

Problem: Current validation is hard-coded and doesn't support custom outputs/formatters.

Solution: Make all outputs/formatters use factory pattern and inject schema into returned function.

Current:
- File output: factory pattern (file_output_factory(config) -> function)
- Console output: direct function
- Hard-coded validation in transformation.lua

New approach:
- All outputs/formatters become factories
- Factory validates config and returns function with ._schema attached
- Validation logic checks function._schema at runtime
- No registry needed - schema travels with function

Example:
console_output_factory(config) -> function with function._schema = {stream = {type="userdata", required=false}}

Benefits:
- No API changes for simple cases
- Unified pattern for all outputs/formatters  
- Schema self-documenting
- Supports custom outputs/formatters
- No global state/registry complexity

Implementation:
1. Convert formatters to factory pattern first (simpler, no config usually)
2. Convert console output to factory pattern
3. Update transformation logic to use schemas for validation
4. Test with custom formatters/outputs
